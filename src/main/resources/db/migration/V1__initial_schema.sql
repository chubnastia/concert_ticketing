-- V1: initial schema created for tests & clean installs

-- CONCERT
CREATE TABLE IF NOT EXISTS public.concert (
  id                 BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name               VARCHAR(255)      NOT NULL,
  start_time         TIMESTAMP         NOT NULL,
  venue              VARCHAR(255)      NOT NULL,
  capacity           INTEGER           NOT NULL,
  price              NUMERIC(10,2)     NOT NULL,
  available_tickets  INTEGER           NOT NULL,
  version            INTEGER           NOT NULL DEFAULT 0
  -- NOTE: sold_out, restock_token are added by V2
);

-- RESERVATION
CREATE TABLE IF NOT EXISTS public.reservation (
  id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  concert_id  BIGINT            NOT NULL REFERENCES public.concert(id),
  user_id     VARCHAR(255)      NOT NULL,
  quantity    INTEGER           NOT NULL,
  expiry      TIMESTAMP         NOT NULL,
  status      VARCHAR(32)       NOT NULL
);

-- SALE
CREATE TABLE IF NOT EXISTS public.sale (
  id              BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  reservation_id  BIGINT            NOT NULL REFERENCES public.reservation(id),
  created_at      TIMESTAMP         NOT NULL DEFAULT now(),
  status          VARCHAR(32)       NOT NULL
  -- V3 adds a UNIQUE index on (reservation_id) for idempotent buys
);

-- (V2 will create WATCHLIST and OUTBOX and add sold_out/restock_token to CONCERT)
